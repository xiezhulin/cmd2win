#!/usr/bin/env python2
# coding: utf-8
#
# Copyright (c) Guangdong vivo software technology CO.,LTD. Unpublished
#
# Guangdong vivo software technology CO.,LTD.
# Proprietary & Confidential
#
# This source code and the algorithms implemented therein constitute
# confidential information and may comprise trade secrets of vivo
# or its associates, and any use thereof is subject to the terms and
# conditions of the Non-Disclosure Agreement pursuant to which this
# source code was originally received.
#
# Description:
#     Run some commands supported on Linux/Cygwin, and it can be reponse on Windows
#     at first you need config cmd2line_server.py on windows and start it
#
# Author:
#       Ronny<xiezhulin@vivo.com>
#
# Version infomation:
#     Version  Date            Description
#     v1.0     Mar 08, 2016    first version
#     v1.1     Jan 03, 2017    improve performance and fix bug that can't open directory
#     v1.2     Apr 18, 2018    support open parent directory and custom command
#     v1.3     Jul 26, 2018    support clip command
#     v1.4     Sep 19, 2018    support multi-config smb share directory, unsupport enviornment 'SMB_MAP_DRIVE', always use windows ip as prefix
#     v1.5     Sep 20, 2018    support cygwin enviorment
#

import os
import sys
from abc import abstractmethod
reload(sys)
sys.setdefaultencoding('utf-8')
import optparse
import socket


class Common():

    def run_and_get(self, command):
        result = []
        try:
            f = os.popen(command)
            content = f.read()
            for line in content.splitlines():
                line = line.strip()
                if line != "":
                    result.append(line)
        finally:
            f.close()

        return result


class CommandConvertSender():
    USAGE = """cmd2win [Optinos] [Args]
Args:
    cmp <src> <dst>
        cmp two files or directories

    open [file/directory] [...]
        open files or directories, defaults to the current directory

    open_parent_dir [file/directory] [...]
        open the parent directory of given files or directories, defaults to the current directory

    custom <"windows command"> [file/directory] [...]
        run windows command, double quotation marks are used as references for multi-words; file/directory will be
        kept its native format if it starts with a colon, or convert to samba format; file/directory no defaults

        .e.g:
            cmd2win --host 192.168.1.1 custom "adb install -r" ./build/testdemo.apk
            cmd2win --host 192.168.1.1 custom "adb push" ./app/build/outputs/apk/debug/app-debug.apk :/system/app/TestDemo
            cmd2win --host 192.168.1.1 custom "adb root & adb remount"
            cmd2win --host 192.168.1.1 custom "adb remount"
            cmd2win --host 192.168.1.1 custom "adb shell mkdir -p" :/system/app/TestDemo
            cmd2win --host 192.168.1.1 custom "adb shell rm -rf" :/system/app/TestDemo

    clip <file/directory/content>
        copy the window's corresponding path of the given file/directory to window's clipboard, defaults to the current directory"""

    # config default windows host and port
    DEFAULT_HOST = '192.168.1.1'
    DEFAULT_PORT = 8090

    # parse unix environment variables
    COMPARER = 'SMB_COMPARER'
    TXT_EDITOR = 'SMB_TXT_EDITOR'
    TXT_EDITOR_SUPPORT_MULTI_FILES = 'SMB_TXT_EDITOR_SUPPORT_MULTI_FILES'
    ENV = os.environ

    comparer = ENV[COMPARER] if COMPARER in ENV else 'fc'
    editor = ENV[TXT_EDITOR] if TXT_EDITOR in ENV else 'notepad'

    if TXT_EDITOR_SUPPORT_MULTI_FILES in ENV:
        if ENV[TXT_EDITOR_SUPPORT_MULTI_FILES] == 'True':
            editor_support_multi_files = True
    else:
        editor_support_multi_files = False

    # default disable
    verbose = False

    def __init__(self, *args):
        cmd = self.__parse_args()
        if not cmd:
            return

        self.s = socket.socket()
        self.s.connect((self.host, self.port))
        self.ipaddr = self.s.getsockname()[0]
        self.__send(cmd)

    def __delete__(self):
        if self.s:
            self.s.close()

    def __check_and_convert(self, path):
        if not os.path.exists(path):
            raise Exception("%s: No such file or directory" % (path,))
        else:
            return self.convert(path)

    """
    @description: covert path, the method can be invaked if the path is exist
    @params path: a unix path(linux, cgywin, ...)
    @return: windows path
    """

    @abstractmethod
    def convert(self, path):
        return "";

    def __parse_args(self):
        p = optparse.OptionParser(usage=self.USAGE, add_help_option=True)
        p.add_option('--host',
                        dest='host',
                        help='server host, defaults to %s' % self.DEFAULT_HOST,
                        metavar='HOST',
                        default=self.DEFAULT_HOST)
        p.add_option('-p', '--port',
                        dest='port',
                        help='server port, defaults to %d' % self.DEFAULT_PORT,
                        metavar='PORT',
                        default=self.DEFAULT_PORT)
        p.add_option('-v', '--verbose',
                        dest='verbose',
                        action='store_true',
                        help='verbosely list processed')

        opt, remainder = p.parse_args()
        if opt.verbose:
            self.verbose = True
        if opt.host:
            self.host = opt.host
        else:
            print("You should config host ipaddress by --host, details to run 'domsb --help'")

        if opt.port:
            self.port = int(opt.port)

        if len(remainder) < 1:
            print("No args given!\nRun 'cmd2win -h' to get help")

        return remainder

    def __send(self, cmd):
        name = cmd[0]
        args = cmd[1:]
        if name == 'cmp':
            win_cmd = self.__cmp(args)
        elif name == 'open':
            win_cmd = self.__open(args)
        elif name == 'open_parent_dir':
            win_cmd = self.__open(args, parent=True)
        elif name == 'custom':
            win_cmd = self.__custom(args)
        elif name == 'clip':
            win_cmd = self.__clip(args)
        else:
            print("Unsupport cmd: %s" % (name,))
            return ''

        if win_cmd and self.s:
            self.s.send(win_cmd)
            if self.verbose:
                print("Send: [%s]" % (win_cmd,))

    def __cmp(self, args):
        if len(args) != 2:
            print("cmp need two args")
            return ''

        src = self.__check_and_convert(args[0])
        dst = self.__check_and_convert(args[1])
        return "%s %s %s" % (self.comparer, src, dst)

    def __open(self, args, parent=False):
        if len(args) == 0:
            args = [os.getcwd(), ]
            if self.verbose:
                print("Use current working directory as defaut")

        cmd = []
        dirlist = []
        filelist = []

        for p in args:
            if parent:
                p = os.path.dirname(p)

            win_path = self.__check_and_convert(p)
            if os.path.isdir(p):
                dirlist.append(win_path)
            elif os.path.isfile(p):
                filelist.append(win_path)
            else:
                print("%s: unknown type" % (p,))
                return ''

        for d in dirlist:
            cmd.append(u'start %s' % d)

        if filelist:
            if self.editor_support_multi_files:
                cmd.append(u'%s %s' % (self.editor, ' '.join(filelist)))
            else:
                for d in filelist:
                    cmd.append(u'%s %s' % (self.editor, win_path))

        return ' | '.join(cmd)

    """
    @params args[0]:
        windows command, double quotation marks are used as references for multi-words
    @params args[1..n]:
        keep its native format if the path starts with a colon, or convert to samba format
    """

    def __custom(self, args):
        if len(args) < 1:
            print("Invalid paramters, custom need one parameter at least")
            return ''

        cmd = []
        cmd.append(args[0])

        args = args[1:]
        for p in args:
            if p.startswith(':'):
                p = p[1:]
                if self.verbose:
                    print("Skip origin path:[%s]" % (p,))
                cmd.append(p)
            else:
                win_path = self.__check_and_convert(p)
                cmd.append(win_path)

        return ' '.join(cmd)

    def __clip(self, args):
        if len(args) == 0:
            args = [os.getcwd(), ]
            if self.verbose:
                print("Use current working directory as defaut")
        elif len(args) != 1:
            print("Only one parameter, please retry")
            return

        p = args[0]
        win_path = self.__check_and_convert(p)
        if self.verbose:
            print("clip -> %s" % (win_path,))
        # can't contain a space before '|'
        return "echo x|set/p =" + win_path + "| clip"


class CygwinCommad(CommandConvertSender, Common):

    def __init__(self, *args):
        self.cygpath_prefix = 'cygpath -aw '
        CommandConvertSender.__init__(self, *args)

    def __delete__(self):
        CommandConvertSender.__delete__(self)

    """ override method """
    def convert(self, path):
        result = Common.run_and_get(self, self.cygpath_prefix + path)
        if len(result) != 1:
            raise Exception("Invalid result [%s] for '%s'" % ('\n'.join(result), self.cygpath_prefix))
        if CommandConvertSender.verbose:
            print("cygpath: %s -> %s" % (path, result[0]))
        return result[0]


class SmbCommand(CommandConvertSender):

    def __init__(self, *args):
        self.shares = self.__get_smb_share_map()
        CommandConvertSender.__init__(self, *args)

    def __delete__(self):
        CommandConvertSender.__delete__(self)

    """
    override method
    @todo: ensure path under HOME
    """
    def convert(self, path):
        real_path = os.path.realpath(path)
        return self.__convert2smb(real_path)

    def __convert2smb(self, real_path):
        found = 0
        for sharename, sharepath in self.shares.iteritems():
            if real_path.find(sharepath) != -1:
                smb_path = real_path.replace(sharepath, sharename).replace('/', '\\')
                found = 1
                break
        if found == 0:
            print("No found corresponding smb config")
            sys.exit(2)

        return r'\\' + self.ipaddr + '\\' + smb_path

    def __get_user_smb_conf(self):
        # get valid line
        lines = []
        with open('/etc/samba/smb.conf') as f:
            for line in f:
                line = line.strip()
                if line.startswith(';') or line.startswith('#') or line == '':
                    continue
                lines.append(line)

        # parse to map
        sections = {}
        section = None
        for line in lines:
            if line.startswith("[") and line.endswith(']'):
                section = line.strip('[').strip(']')
                sections.setdefault(section, {})
            else:
                pair = line.split("=")
                if not section or len(pair) != 2:
                    raise Exception("smb.conf: invalid format")

                key = pair[0].strip()
                value = pair[1].strip()
                sections[section][key] = value

        # filter
        ignore_sections = ("global", "printers", "print$")
        for k in ignore_sections:
            if k in sections:
                sections.pop(k)

        return sections

    """
    @return: a dictionary with share name as key, linux path as value
    """
    def __get_smb_share_map(self):
        # TODO: check permisson
        shares = {}
        key_path = "path"
        sections = self.__get_user_smb_conf()
        for section, content in sections.iteritems():
            if key_path in content:
                value_path = os.path.realpath(content[key_path].strip())
                shares[section] = value_path

        return shares


if __name__ == '__main__':
    DEBUG = False
    support_platform = ('Linux', 'CYGWIN_NT')
    uname = Common().run_and_get('uname')[0]
    if DEBUG:
        print(">>> %s" % (uname,))

    if uname.find('Linux') != -1:
        SmbCommand(sys.argv[1:])
    elif uname.find('CYGWIN_NT') != -1:
        CygwinCommad(sys.argv[1:])
    else:
        print("Unspport %s platform, send e-mail to xiezhulin@vivo.com if want to support" % (uname,))
